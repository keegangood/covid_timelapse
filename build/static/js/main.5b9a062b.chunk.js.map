{"version":3,"sources":["app/resources/webWorker/useScrubDataWorker.js","app/resources/webWorker/scrubData.js","app/slices/covidSlice.js","app/resources/helpers.js","components/TimelineSlider.js","App.js","app/store.js","index.js"],"names":["useWorker","workerApiAndCleanup","useMemo","worker","Worker","workerApi","wrap","cleanup","releaseProxy","terminate","makeWorkerApiAndCleanup","useEffect","module","exports","dayjs","extend","customParseFormat","getCSVData","createAsyncThunk","dateString","a","rejectWithValue","loadCSV","CSVLoader","response","covidSlice","createSlice","name","initialState","loadingStatus","startDate","endDate","subtract","format","viewDate","rawData","dataChunks","reducers","addDatum","state","action","data","payload","date","addDataChunk","console","log","concat","setViewDate","setLoadingStatus","extraReducers","pending","rejected","fulfilled","actions","isSameOrBefore","TimelineSlider","percentToEndDate","onChange","dateCount","totalDays","isPlaying","toggleIsPlaying","TimelineContainer","useRef","styled","background","position","zIndex","top","width","display","flexDirection","justifyContent","alignItems","SliderContainer","SliderInput","withStyles","root","marginBottom","marginTop","valueLabel","color","fontSize","markLabel","Slider","sliderTheme","createTheme","overrides","animationRef","previousTimeRef","useLayoutEffect","current","requestAnimationFrame","animate","currentTime","newDate","add","cancelAnimationFrame","size","theme","sx","min","max","valueLabelDisplay","valueLabelFormat","value","marks","label","event","newValue","Button","onClick","setTimeout","cursor","App","dispatch","useDispatch","process","REACT_APP_MAPBOX_ACCESS_TOKEN","useSelector","covidData","useState","longitude","latitude","coords","diff","lastLoadedDate","setState","getEndDate","_startDate","_endDate","length","yesterday","isAfter","loadCSVs","dateRange","currentDate","push","generateDateRange","promises","map","Promise","all","then","results","scrubData","res","catch","err","dataChunk","newEndDate","endDateIsYesterday","isSame","distToYesterday","Math","abs","setDateCount","useCallback","newCount","newViewDate","INITIAL_VIEW_STATE","zoom","pitch","bearing","backgroundLayers","SimpleMeshLayer","id","mesh","SphereGeometry","radius","nlat","nlong","coordinateSystem","COORDINATE_SYSTEM","CARTESIAN","getPosition","getColor","GeoJsonLayer","stroked","filled","getFillColor","columnLayers","chunk","i","filteredData","filter","datum","isVisible","includes","ColumnLayer","diskResolution","pickable","extruded","elevationScale","visible","d","confirmed","coverage","getFilterValue","filterRange","extensions","DataFilterExtension","filterSize","undefined","coordinates","getElevation","className","initialViewState","controller","layers","views","GlobeView","parameters","clearColor","getTooltip","object","html","title","fieldName","forEach","field","style","textAlign","borderRadius","padding","useDevicePixels","preventStyleDiffing","configureStore","reducer","covidReducer","middleware","getDefaultMiddleware","serializableCheck","devTools","stateSanitizer","actionSanitizer","type","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.5b9a062b.chunk.js","sourcesContent":["import { useEffect, useState, useMemo } from 'react'\r\nimport { wrap, releaseProxy } from 'comlink'\r\n\r\nexport const makeWorkerApiAndCleanup = () => {\r\n  const worker = new Worker('./scrubData.js', { type: 'module' })\r\n\r\n  const workerApi = wrap(worker)\r\n\r\n  const cleanup = () => {\r\n    workerApi[releaseProxy]()\r\n    worker.terminate()\r\n  }\r\n\r\n  const workerApiAndCleanup = { workerApi, cleanup }\r\n\r\n  return workerApiAndCleanup\r\n}\r\n\r\nexport const useWorker = () => {\r\n  const workerApiAndCleanup = useMemo(() => makeWorkerApiAndCleanup(), [])\r\n\r\n  useEffect(() => {\r\n    const { cleanup } = workerApiAndCleanup\r\n\r\n    return () => {\r\n      cleanup()\r\n    }\r\n  }, [workerApiAndCleanup])\r\n\r\n  return workerApiAndCleanup\r\n}\r\n\r\nconst useScrubDataWorker = (date, rawData) => {\r\n  const [data, setData] = useState({\r\n    isLoading: false,\r\n    results: []\r\n  })\r\n  const { workerApi } = useWorker()\r\n  useEffect(() => {\r\n    setData({ isLoading: true, results: [] })\r\n\r\n    workerApi\r\n      .scrubData(rawData)\r\n      .then(results => setData({ isLoading: false, results: results }))\r\n  }, [workerApi, rawData])\r\n\r\n  return data\r\n}\r\n\r\nexport default useScrubDataWorker\r\n","module.exports = __webpack_public_path__ + \"static/js/0.1de77cc8.chunk.worker.js\"","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { load as loadCSV } from \"@loaders.gl/core\";\r\nimport { CSVLoader } from \"@loaders.gl/csv\";\r\nimport dayjs from \"dayjs\";\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\r\ndayjs.extend(customParseFormat);\r\n\r\nconst BASE_URL =\r\n  \"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports\";\r\n\r\nexport const getCSVData = createAsyncThunk(\r\n  \"covidData/getCSVData\",\r\n  // date: string - MM-DD-YYYY\r\n  async (dateString, { rejectWithValue }) => {\r\n    try {\r\n      const response = await loadCSV(\r\n        BASE_URL + `/${dateString}.csv`,\r\n        CSVLoader\r\n      );\r\n      return response;\r\n    } catch (error) {\r\n      return rejectWithValue(error);\r\n    }\r\n  }\r\n);\r\n\r\nexport const covidSlice = createSlice({\r\n  name: \"covidData\",\r\n  initialState: {\r\n    loadingStatus: \"PENDING\",\r\n    startDate: \"01-22-2020\", // date of first CSV file;\r\n    endDate: dayjs().subtract(1, \"day\").format(\"MM-DD-YYYY\"), // today, less one day (also known as yesterday)\r\n    viewDate: \"01-22-2020\",\r\n    rawData: [],\r\n    dataChunks: [],\r\n    // EXAMPLE DATA\r\n    // [\r\n    //   {\r\n    //     'MM-DD-YYYY': [\r\n    //       {\r\n    //         'country': '',\r\n    //         'stateProvince': '',\r\n    //         'cityCounty': '',\r\n    //         'latitude': 0.0,\r\n    //         'longitude': 0.0,\r\n    //         'confirmed': 0,\r\n    //         'deaths': 0,\r\n    //         'recovered': 0,\r\n    //         'active': 0,\r\n    //       },\r\n    //       ...\r\n    //     ]\r\n    //   },\r\n    //   ...\r\n    // ]\r\n  },\r\n  reducers: {\r\n    addDatum: (state, action) => {\r\n      state.data = {\r\n        ...state.data,\r\n        [action.payload.date]: action.payload.data,\r\n      };\r\n    },\r\n    addDataChunk: (state, action) => {\r\n      console.log('chunk length at add', action.payload)\r\n      state.dataChunks = state.dataChunks.concat([action.payload]);\r\n    },\r\n    setViewDate: (state, action) => {\r\n      state = {\r\n        ...state,\r\n        viewDate: action.payload,\r\n      };\r\n    },\r\n    setLoadingStatus: (state, action) => {\r\n      state.loadingStatus = action.payload;\r\n    },\r\n  },\r\n  extraReducers: {\r\n    [getCSVData.pending]: (state, action) => {\r\n      state.loadingStatus = \"PENDING\";\r\n      state.rawData = null;\r\n    },\r\n    [getCSVData.rejected]: (state, action) => {\r\n      // ... I'm sure something will go here eventually\r\n    },\r\n    [getCSVData.fulfilled]: (state, action) => {\r\n      // state.rawData = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addDatum, setViewDate, addDataChunk } = covidSlice.actions;\r\nexport default covidSlice.reducer;\r\n","import dayjs from \"dayjs\";\r\nimport isSameOrBefore from 'dayjs/plugin/isSameOrBefore' \r\nimport countryCoordinates from \"./countryCoordinates\";\r\nimport stateCoordinates from \"./stateCoordinates\";\r\n\r\ndayjs.extend(isSameOrBefore)\r\n/**\r\n * Create an object where the keys are dates and the values are arrays containing COVID\r\n * data for that date from around the world\r\n *\r\n * @param {string} _date Date string in format \"MM-DD-YYYY\"\r\n * @param {Object.<string, Object[]} _rawData\r\n * @returns object {'MM-DD-YYYY': [data objects]}\r\n */\r\nexport const scrubData = (_date, _rawData) => {\r\n  const EXCLUDED_REGIONS = [\r\n    \"diamond princess\",\r\n    \"grand princess\",\r\n    \"cruise ship\",\r\n    \"port quarantine\",\r\n    \"ms zaandam\",\r\n    \"summer olympics 2020\",\r\n    \"recovered\",\r\n    \"unknown\",\r\n    \"others\"\r\n  ];\r\n\r\n  const numberOfFields = Object.keys(_rawData[0]).length;\r\n  let fieldNames = {\r\n    countryRegion: null,\r\n    provinceState: null,\r\n    latitude: null,\r\n    longitude: null\r\n  };\r\n  // ACCOMODATE FOR DIFFERENT FIELD NAMES IN FIRST FEW CSV FILES\r\n  if (numberOfFields <= 8) {\r\n    fieldNames.countryRegion = \"Country/Region\";\r\n    fieldNames.provinceState = \"Province/State\";\r\n    fieldNames.latitude = \"Latitude\";\r\n    fieldNames.longitude = \"Longitude\";\r\n  } else {\r\n    fieldNames.countryRegion = \"Country_Region\";\r\n    fieldNames.provinceState = \"Province_State\";\r\n    fieldNames.latitude = \"Lat\";\r\n    fieldNames.longitude = \"Long_\";\r\n  }\r\n\r\n  let countryRegionFieldName = fieldNames.countryRegion;\r\n  let provinceStateFieldName = fieldNames.provinceState;\r\n\r\n  let newDateData = [];\r\n  _rawData.forEach((datum) => {\r\n    // if (!datum[countryRegionFieldName]) {\r\n    //   console.log(countryRegionFieldName, datum);\r\n    // }\r\n    if (\r\n      !EXCLUDED_REGIONS.includes(datum[countryRegionFieldName].toLowerCase())\r\n    ) {\r\n      let countryRegion = \"\";\r\n\r\n      // DETERMINE THE COUNTRY/REGION NAME\r\n      switch (datum[countryRegionFieldName]) {\r\n        case \"US\":\r\n          countryRegion = \"United States\";\r\n          break;\r\n        case \"UK\":\r\n          countryRegion = \"United Kingdom\";\r\n          break;\r\n        case \"Taiwan*\":\r\n          countryRegion = \"Taiwan\";\r\n          break;\r\n        case \"Mainland China\":\r\n          countryRegion = \"China\";\r\n          break;\r\n        case \"Iran (Islamic Republic of)\":\r\n          countryRegion = \"Iran\";\r\n          break;\r\n        default:\r\n          countryRegion = datum[countryRegionFieldName].trim();\r\n      }\r\n\r\n      // PROVINCE/STATE NAME\r\n      let provinceState = datum[provinceStateFieldName];\r\n\r\n      if (provinceState !== null) {\r\n        provinceState = provinceState.trim();\r\n      }\r\n\r\n      // DETERMINE COORDINATES FOR DATUM\r\n      // IF LAT/LONG ARE EMPTY, ASSIGN VALUES\r\n      // FOR STATE OR COUNTRY INSTEAD\r\n      let coordinates;\r\n      if (!datum.Lat || !datum.Long_) {\r\n        // USE COORDINATES FOR STATE/PROVINCE, IF EXISTENT\r\n        if (\r\n          Object.keys(stateCoordinates).includes(datum[provinceStateFieldName])\r\n        ) {\r\n          coordinates = stateCoordinates[datum[provinceStateFieldName]];\r\n        } else {\r\n          // USE COUNTRY/REGION FOR DATA WITH NO STATE/PROVINCE\r\n          if (countryRegion === \"South Korea\") {\r\n            coordinates = countryCoordinates[\"Korea, South\"];\r\n          } else {\r\n            coordinates = countryCoordinates[countryRegion];\r\n          }\r\n        }\r\n      } else {\r\n        // IF DATUM HAS COORDINATES, USE THEM\r\n        coordinates = { latitude: datum.Lat, longitude: datum.Long_ };\r\n      }\r\n\r\n      // if (coordinates === undefined) {\r\n      //   console.log(datum);\r\n      // }\r\n\r\n      let county = datum.Admin2;\r\n\r\n      newDateData.push({\r\n        date: _date,\r\n        countryRegion,\r\n        provinceState,\r\n        county,\r\n        coordinates,\r\n        confirmed: datum.Confirmed,\r\n        deaths: datum.Deaths,\r\n        active: datum.Active,\r\n        recovered: datum.Recovered\r\n      });\r\n    }\r\n  });\r\n  let _data = newDateData;\r\n  // console.log(\"scrubbed\", _data);\r\n\r\n  return _data;\r\n};\r\n\r\n/**\r\n * Return an array of date strings from startDate to endDate\r\n *\r\n * generateDateRange('09-17-2021', '10-17-2021') -> ['09-17-2021', '09-18-2021', ..., '10-16-2021', '10-17-2021']\r\n *\r\n * @param {string} startDate - Start of the date range. MM-DD-YYYY date format\r\n * @param {string} endDate - End of the date range. MM-DD-YYYY date format\r\n */\r\nexport const generateDateRange = (startDate, endDate) => {\r\n  let dateRange = [];\r\n  let currentDate = dayjs(startDate, \"MM-DD-YYYY\");\r\n\r\n  while (currentDate.isSameOrBefore(endDate)) {\r\n    dateRange.push(currentDate.format(\"MM-DD-YYYY\"));\r\n    currentDate = currentDate.add(1, \"day\");\r\n  }\r\n\r\n  return dateRange;\r\n};\r\n","import React, { useEffect, useLayoutEffect, useState, useRef } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { withStyles } from '@mui/styles'\r\nimport { createTheme } from '@mui/material/styles'\r\nimport Slider from '@mui/material/Slider'\r\nimport { Button } from '@mui/material'\r\nimport PlayArrow from '@mui/icons-material/PlayArrow'\r\nimport PauseIcon from '@mui/icons-material/Pause'\r\n\r\n// import { setViewDate } from \"../app/slices/covidSlice\";\r\nimport dayjs from 'dayjs'\r\nconst TimelineSlider = ({\r\n  percentToEndDate,\r\n  onChange,\r\n  viewDate,\r\n  dateCount,\r\n  totalDays,\r\n  isPlaying,\r\n  toggleIsPlaying,\r\n  setViewDate\r\n}) => {\r\n  // const [isPlaying, toggleIsPlaying] = useState(false);\r\n  const sliderRef = useRef()\r\n\r\n  const TimelineContainer = styled('div')({\r\n    background: 'rgba(50, 50, 50, .5)',\r\n    position: 'absolute',\r\n    zIndex: 1,\r\n    top: '10px',\r\n    width: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center'\r\n  })\r\n\r\n  const SliderContainer = styled('div')({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    width: '60%',\r\n    justifyContent: 'center'\r\n  })\r\n\r\n  const SliderInput = withStyles({\r\n    root: {\r\n      width: '100%',\r\n      marginBottom: 0,\r\n      marginTop: '15px'\r\n    },\r\n    valueLabel: {\r\n      background: '#eaeaea',\r\n      '& span': {\r\n        color: '#000',\r\n        fontSize: '.8rem'\r\n      }\r\n    },\r\n    markLabel: {\r\n      color: '#eaeaea',\r\n      fontSize: '.8rem'\r\n    }\r\n  })(Slider)\r\n\r\n  const sliderTheme = createTheme({\r\n    overrides: {\r\n      root: {\r\n        width: '100%'\r\n      },\r\n      valueLabel: {\r\n        background: '#eaeaea',\r\n        '& span': {\r\n          color: '#000'\r\n        }\r\n      },\r\n      markLabel: {\r\n        color: '#eaeaea',\r\n        fontSize: '.6rem'\r\n      }\r\n    }\r\n  })\r\n\r\n  // const intervalRef = useRef()\r\n  // const animationRef = useRef()\r\n  // useEffect(() => {\r\n  //   if (isPlaying) {\r\n  //     intervalRef.current = setInterval(() => {\r\n  //       animationRef.current = requestAnimationFrame(() => {\r\n  //         onChange(++dateCount)\r\n  //         let newDate = dayjs('01-22-2020', 'MM-DD-YYYY')\r\n  //           .add(dateCount, 'days')\r\n  //           .format('MM-DD-YYYY')\r\n  //         setViewDate(newDate)\r\n  //       })\r\n  //     }, 200)\r\n  //   } else {\r\n  //     clearInterval(intervalRef.current)\r\n  //   }\r\n  //   return () =>\r\n  //     clearInterval(intervalRef.current) &&\r\n  //     cancelAnimationFrame(animationRef.current)\r\n  // }, [isPlaying])\r\n\r\n  const animationRef = useRef()\r\n  const previousTimeRef = useRef()\r\n  useLayoutEffect(() => {\r\n    previousTimeRef.current = 0\r\n    if (isPlaying) {\r\n      let animate = currentTime => {\r\n        if (\r\n          !previousTimeRef.current ||\r\n          currentTime - previousTimeRef.current >= 150\r\n        ) {\r\n          onChange(++dateCount)\r\n          let newDate = dayjs('01-22-2020', 'MM-DD-YYYY')\r\n            .add(dateCount, 'days')\r\n            .format('MM-DD-YYYY')\r\n          setViewDate(newDate)\r\n          previousTimeRef.current = currentTime\r\n        }\r\n        animationRef.current = requestAnimationFrame(animate)\r\n      }\r\n\r\n      animationRef.current = requestAnimationFrame(animate)\r\n    }\r\n    return () =>\r\n      animationRef.current && cancelAnimationFrame(animationRef.current)\r\n  }, [isPlaying])\r\n\r\n  useEffect(() => {\r\n    if (isPlaying && dateCount >= totalDays - 1) {\r\n      toggleIsPlaying()\r\n      cancelAnimationFrame(animationRef.current)\r\n      // clearInterval(intervalRef.current)\r\n    }\r\n  }, [dateCount, totalDays, isPlaying])\r\n\r\n  return (\r\n    <TimelineContainer>\r\n      <SliderContainer>\r\n        <SliderInput\r\n          size={'small'}\r\n          theme={sliderTheme}\r\n          sx={{\r\n            color: 'info.main'\r\n          }}\r\n          min={0}\r\n          max={totalDays}\r\n          valueLabelDisplay='on'\r\n          valueLabelFormat={viewDate}\r\n          value={dateCount}\r\n          marks={[\r\n            {\r\n              value: 0,\r\n              label: 'January 22, 2020'\r\n            },\r\n            {\r\n              value: totalDays * 0.25\r\n            },\r\n            {\r\n              value: totalDays * 0.5\r\n            },\r\n            {\r\n              value: totalDays * 0.75\r\n            },\r\n            {\r\n              value: totalDays,\r\n              label: dayjs()\r\n                .subtract(1, 'day')\r\n                .format('MMMM DD, YYYY')\r\n            }\r\n          ]}\r\n          onChange={(event, newValue) => {\r\n            onChange(newValue)\r\n            let newDate = dayjs('01-22-2020', 'MM-DD-YYYY')\r\n            .add(dateCount, 'days')\r\n            .format('MM-DD-YYYY')\r\n            console.log(newValue, newDate)\r\n          setViewDate(newDate)\r\n          }}\r\n        ></SliderInput>\r\n      </SliderContainer>\r\n      <Button\r\n        onClick={() => {\r\n          setTimeout(() => {\r\n            if (isPlaying) {\r\n              cancelAnimationFrame(animationRef.current)\r\n              // clearInterval(intervalRef.current)\r\n            }\r\n            toggleIsPlaying()\r\n          }, 10)\r\n        }}\r\n      >\r\n        {!isPlaying ? (\r\n          <PlayArrow\r\n            color='info'\r\n            sx={{\r\n              fontSize: '2rem',\r\n              '&:hover': {\r\n                cursor: 'pointer'\r\n              }\r\n            }}\r\n          />\r\n        ) : (\r\n          <PauseIcon\r\n            color='info'\r\n            sx={{\r\n              fontSize: '2rem',\r\n              '&:hover': {\r\n                cursor: 'pointer'\r\n              }\r\n            }}\r\n          />\r\n        )}\r\n      </Button>\r\n    </TimelineContainer>\r\n  )\r\n}\r\n\r\nexport default TimelineSlider\r\n\r\n// console.log('newValue', newValue)\r\n","import './App.css'\r\n\r\nimport { useEffect, useState, useMemo, useCallback } from 'react'\r\nimport dayjs from 'dayjs'\r\n// import worker from \"./app/resources/worker\";\r\n// import WebWorker from \"./app/resources/workerSetup\";\r\nimport { getCSVData, addDataChunk } from './app/slices/covidSlice'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { generateDateRange, scrubData } from './app/resources/helpers'\r\nimport DeckGL from '@deck.gl/react'\r\nimport { ColumnLayer } from '@deck.gl/layers'\r\nimport { DataFilterExtension } from '@deck.gl/extensions'\r\nimport { useWorker } from './app/resources/webWorker/useScrubDataWorker'\r\nimport {\r\n  COORDINATE_SYSTEM,\r\n  _GlobeView as GlobeView,\r\n  LightingEffect,\r\n  AmbientLight,\r\n  _SunLight as SunLight\r\n} from '@deck.gl/core'\r\n\r\nimport { GeoJsonLayer } from '@deck.gl/layers'\r\nimport { SimpleMeshLayer } from '@deck.gl/mesh-layers'\r\n\r\nimport { SphereGeometry } from '@luma.gl/core'\r\nimport TimelineSlider from './components/TimelineSlider'\r\n\r\nfunction App () {\r\n  const dispatch = useDispatch()\r\n\r\n  const MAPBOX_ACCESS_TOKEN = process.env.REACT_APP_MAPBOX_ACCESS_TOKEN\r\n  const DATE_BLOCK_SIZE = 200 // number of days to load at a time\r\n\r\n  const { startDate, dataChunks } = useSelector(state => state.covidData)\r\n\r\n  const [coords, setCoords] = useState({\r\n    longitude: -96.4247,\r\n    latitude: 10.51073\r\n  })\r\n\r\n  const [state, setState] = useState({\r\n    dateCount: 0,\r\n    totalDays: dayjs()\r\n      .subtract(1, 'day')\r\n      .diff(dayjs('01-22-2020', 'MM-DD-YYYY'), 'days'),\r\n    startDate: '01-22-2020',\r\n    endDate: dayjs()\r\n      .subtract(1, 'day')\r\n      .format('MM-DD-YYYY'),\r\n    lastLoadedDate: dayjs('01-22-2020', 'MM-DD-YYYY')\r\n      .add(DATE_BLOCK_SIZE, 'days')\r\n      .format('MM-DD-YYYY'), // for lazy loading\r\n    viewDate: '01-22-2020',\r\n    isPlaying: false\r\n  })\r\n\r\n  const { workerApi, cleanup } = useWorker()\r\n\r\n  const getEndDate = _startDate => {\r\n    let _endDate\r\n    if (dataChunks.length < 2) {\r\n      _endDate = dayjs(_startDate, 'MM-DD-YYYY').add(DATE_BLOCK_SIZE, 'days')\r\n    } else {\r\n      _endDate = dayjs(_startDate, 'MM-DD-YYYY').add(100, 'days')\r\n    }\r\n\r\n    // if the calculated _endDate is past yesterday,\r\n    // yesterday becomes the _endDate\r\n    const yesterday = dayjs().subtract(1, 'day')\r\n    if (_endDate.isAfter(yesterday)) {\r\n      _endDate = yesterday\r\n    }\r\n\r\n    return _endDate\r\n  }\r\n\r\n  const loadCSVs = startDate => {\r\n    let _endDate = getEndDate(startDate)\r\n    let dateRange = generateDateRange(startDate, _endDate)\r\n\r\n    let promises = []\r\n    dateRange.map(date => {\r\n      promises.push(dispatch(getCSVData(date)))\r\n    })\r\n\r\n    Promise.all(promises)\r\n      .then(results => {\r\n        return workerApi\r\n          .scrubData(results)\r\n          .then(res => res)\r\n          .catch(err => console.log('err', err))\r\n      })\r\n      .then(dataChunk => {\r\n        dispatch(addDataChunk({ data: dataChunk, dateRange }))\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadCSVs('01-22-2020')\r\n  }, [])\r\n\r\n  //\r\n  // If the viewDate is within a certain number of days from the lastLoadedDate,\r\n  // load the next set of data\r\n  useEffect(() => {\r\n    const diff = dayjs(state.lastLoadedDate, 'MM-DD-YYYY').diff(\r\n      dayjs(state.viewDate, 'MM-DD-YYYY'),\r\n      'days'\r\n    )\r\n\r\n    let newEndDate, startDate\r\n\r\n    if (diff < 0) {\r\n      startDate = state.viewDate\r\n    } else {\r\n      startDate = state.lastLoadedDate\r\n    }\r\n    newEndDate = getEndDate(startDate).subtract(1, 'day')\r\n    const endDateIsYesterday = newEndDate.isSame(dayjs().subtract(1, 'day'))\r\n\r\n    // distance from current viewDate to yesterday's date\r\n    let distToYesterday = dayjs()\r\n      .subtract(1, 'day')\r\n      .diff(dayjs(newEndDate, 'MM-DD-YYYY'), 'days')\r\n\r\n    if (Math.abs(diff) < 190 && distToYesterday >= 1) {\r\n      loadCSVs(state.lastLoadedDate)\r\n      if (endDateIsYesterday) {\r\n        return\r\n      }\r\n      if (diff > 0) {\r\n        setState(state => ({\r\n          ...state,\r\n          lastLoadedDate: newEndDate.format('MM-DD-YYYY')\r\n        }))\r\n      }\r\n    }\r\n  }, [state.viewDate, state.lastLoadedDate, dataChunks])\r\n\r\n  const setDateCount = useCallback(newCount => {\r\n    setState(state => ({\r\n      ...state,\r\n      dateCount: newCount || state.dateCount++\r\n    }))\r\n  }, [])\r\n\r\n  const setViewDate = useCallback(newViewDate => {\r\n    setState(state => ({\r\n      ...state,\r\n      viewDate: newViewDate\r\n    }))\r\n  }, [])\r\n\r\n  const toggleIsPlaying = useCallback(() => {\r\n    setTimeout(() => {\r\n      setState(state => {\r\n        return { ...state, isPlaying: !state.isPlaying }\r\n      })\r\n    }, 10)\r\n  }, [])\r\n\r\n  // Viewport settings\r\n  const INITIAL_VIEW_STATE = {\r\n    longitude: coords.longitude,\r\n    latitude: coords.latitude,\r\n    zoom: -0.5,\r\n    pitch: 0,\r\n    bearing: 0\r\n  }\r\n  const EARTH_RADIUS_METERS = 6.3e6\r\n\r\n  const backgroundLayers = useMemo(\r\n    () => [\r\n      new SimpleMeshLayer({\r\n        id: 'earth-sphere',\r\n        data: [0],\r\n        mesh: new SphereGeometry({\r\n          radius: EARTH_RADIUS_METERS,\r\n          nlat: 18,\r\n          nlong: 36\r\n        }),\r\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\r\n        getPosition: [0, 0, 0],\r\n        getColor: [20, 20, 255]\r\n      }),\r\n      new GeoJsonLayer({\r\n        id: 'earth-land',\r\n        data:\r\n          'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_land.geojson',\r\n        // Styles\r\n        stroked: false,\r\n        filled: true,\r\n        getFillColor: [20, 85, 20]\r\n      })\r\n    ],\r\n    []\r\n  )\r\n\r\n  const columnLayers = useMemo(\r\n    () =>\r\n      dataChunks.map((chunk, i) => {\r\n        let filteredData = chunk.data.filter(\r\n          datum => datum[0].date === state.viewDate\r\n        )\r\n        let isVisible = chunk.dateRange.includes(state.viewDate)\r\n        return new ColumnLayer({\r\n          id: `confirmed-cases-${i}`,\r\n          data: filteredData[0], //chunk.data,\r\n          diskResolution: 12,\r\n          pickable: true,\r\n          extruded: true,\r\n          elevationScale: 1,\r\n          visible: isVisible,\r\n          getFillColor: d => [255, 255 - d.confirmed / 2 / 255, 0],\r\n          filled: true,\r\n          radius: 1000,\r\n          coverage: 100,\r\n          getFilterValue: d => [\r\n            // d.isVisible,\r\n            // .5 is in the filterRange [0, 1] and will therefore get rendered. 10 will not.\r\n            // d.date === state.viewDate ? 0.5 : 10,\r\n            d.confirmed !== null && d.confirmed > 0 ? 0.5 : 10\r\n          ],\r\n          filterRange: [\r\n            // [0, 1],\r\n            [0, 1]\r\n          ],\r\n          extensions: [new DataFilterExtension({ filterSize: 1 })],\r\n          // updateTriggers: {\r\n          //   getElevation: state.viewDate,\r\n          // },\r\n          getPosition: d => {\r\n            if (d.coordinates === undefined) {\r\n              // console.log(\"no coordinates:\", d);\r\n            } else {\r\n              return [d.coordinates.longitude, d.coordinates.latitude]\r\n            }\r\n          },\r\n          getElevation: d => d.confirmed\r\n          // transitions: {\r\n          //   getElevation: {\r\n          //     // enter: (to, from) => to,\r\n          //     duration: 2000,\r\n          //     // easing: d3.easeCubicInOut,\r\n          //   },\r\n          // },\r\n        })\r\n      }),\r\n    [state.viewDate]\r\n  )\r\n\r\n  const getTooltip = ({ object }) => {\r\n    if (object) {\r\n      let html = ''\r\n      let fields = [\r\n        { title: 'Date', fieldName: 'date' },\r\n        { title: 'Country/Region', fieldName: 'countryRegion' },\r\n        { title: 'Province/State', fieldName: 'provinceState' },\r\n        { title: 'County', fieldName: 'county' },\r\n        { title: 'Confirmed', fieldName: 'confirmed' },\r\n        { title: 'Deaths', fieldName: 'deaths' }\r\n      ]\r\n\r\n      fields.forEach(field => {\r\n        if (object[field.fieldName]) {\r\n          html += `<div>${field.title}: ${object[field.fieldName]}</div>`\r\n        }\r\n\r\n        if (field.fieldName === 'county') {\r\n          html += '<br/>'\r\n        }\r\n      })\r\n\r\n      return {\r\n        html,\r\n        style: {\r\n          textAlign: 'left',\r\n          borderRadius: '5px',\r\n          padding: '15px'\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='App'>\r\n        {dataChunks.length > 0 && (\r\n          <>\r\n            <TimelineSlider\r\n              dateCount={state.dateCount}\r\n              totalDays={state.totalDays}\r\n              onChange={setDateCount}\r\n              viewDate={state.viewDate}\r\n              toggleIsPlaying={toggleIsPlaying}\r\n              isPlaying={state.isPlaying}\r\n              setViewDate={setViewDate}\r\n            />\r\n            <DeckGL\r\n              // debug={true}\r\n              initialViewState={INITIAL_VIEW_STATE}\r\n              controller={true}\r\n              layers={[backgroundLayers, columnLayers]}\r\n              views={new GlobeView()}\r\n              parameters={{\r\n                clearColor: [0, 0, 0, 1]\r\n              }}\r\n              getTooltip={getTooltip}\r\n              useDevicePixels={false}\r\n              preventStyleDiffing={true}\r\n            ></DeckGL>\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    // viewDate: state.covidData.viewDate,\r\n    data: state.covidData.data\r\n    // startDate: state.covidData.startDate,\r\n  }\r\n}\r\n\r\nexport default App\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport covidReducer from \"../app/slices/covidSlice\";\r\n\r\nconst stateSanitizer = (state) => state.covidData.dataChunks ? { ...state.covidData, dataChunks: '<<LONG_BLOB>>' } : state.covidData\r\nconst actionSanitizer = (action) => (\r\n  action.type === 'ADD_DATA_CHUNK' && action.data ?\r\n  { ...action, data: '<<LONG_BLOB>>' } : action\r\n);\r\n\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    covidData: covidReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\r\n    serializableCheck: false\r\n  }),\r\n  devTools: {\r\n    stateSanitizer: stateSanitizer,\r\n    actionSanitizer: actionSanitizer\r\n  }\r\n});\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./app/store\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}